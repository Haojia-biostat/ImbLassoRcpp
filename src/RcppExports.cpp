// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// coord_desc
NumericVector coord_desc(NumericMatrix X, NumericVector y, double lambda, double thresh, int maxit);
RcppExport SEXP _ImbLassoRcpp_coord_desc(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP threshSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(coord_desc(X, y, lambda, thresh, maxit));
    return rcpp_result_gen;
END_RCPP
}
// logit_i
NumericVector logit_i(NumericMatrix X, double b0, NumericVector b);
RcppExport SEXP _ImbLassoRcpp_logit_i(SEXP XSEXP, SEXP b0SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logit_i(X, b0, b));
    return rcpp_result_gen;
END_RCPP
}
// betamat
mat betamat(NumericMatrix X, NumericVector y, double lambda, double thresh, int maxit);
RcppExport SEXP _ImbLassoRcpp_betamat(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP threshSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(betamat(X, y, lambda, thresh, maxit));
    return rcpp_result_gen;
END_RCPP
}
// prob_i
NumericVector prob_i(NumericVector logit);
RcppExport SEXP _ImbLassoRcpp_prob_i(SEXP logitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type logit(logitSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_i(logit));
    return rcpp_result_gen;
END_RCPP
}
// //'SMOTE
//'SMOTE algorithm for imbalanced binary outcome //' //'This function generates synthetic examples for the minority class by kNN and interpolation //' //'@name SMOTE //' //'@param X feature matrix //'@param k number of nearest neighbors to be considered, default value is 5 //'@param N number of new synthetic examples to be generated for each observation, default value is 9 //' //'@return A matrix of //' //'@examples //'SMOTE(matrix(rnorm(100), 10)) //' //'@export  NumericMatrix SMOTE(     const NumericMatrix& X, const int& k, const int& N);
RcppExport SEXP _ImbLassoRcpp_//'SMOTE(SEXP XSEXP, SEXP kSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< matrix(rnorm(100), 10)) //' //'@export  NumericMatrix SMOTE(     const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(//'SMOTE(X, k, N));
    return rcpp_result_gen;
END_RCPP
}
// soft_thresh
double soft_thresh(double z, double gamma);
RcppExport SEXP _ImbLassoRcpp_soft_thresh(SEXP zSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thresh(z, gamma));
    return rcpp_result_gen;
END_RCPP
}
// stratifiedCpp
List stratifiedCpp(const NumericMatrix& X, const IntegerVector& y, const int size);
RcppExport SEXP _ImbLassoRcpp_stratifiedCpp(SEXP XSEXP, SEXP ySEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(stratifiedCpp(X, y, size));
    return rcpp_result_gen;
END_RCPP
}
// weight_i
NumericVector weight_i(NumericVector prob);
RcppExport SEXP _ImbLassoRcpp_weight_i(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(weight_i(prob));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ImbLassoRcpp_coord_desc", (DL_FUNC) &_ImbLassoRcpp_coord_desc, 5},
    {"_ImbLassoRcpp_logit_i", (DL_FUNC) &_ImbLassoRcpp_logit_i, 3},
    {"_ImbLassoRcpp_betamat", (DL_FUNC) &_ImbLassoRcpp_betamat, 5},
    {"_ImbLassoRcpp_prob_i", (DL_FUNC) &_ImbLassoRcpp_prob_i, 1},
    {"_ImbLassoRcpp_//'SMOTE", (DL_FUNC) &_ImbLassoRcpp_//'SMOTE, 3},
    {"_ImbLassoRcpp_soft_thresh", (DL_FUNC) &_ImbLassoRcpp_soft_thresh, 2},
    {"_ImbLassoRcpp_stratifiedCpp", (DL_FUNC) &_ImbLassoRcpp_stratifiedCpp, 3},
    {"_ImbLassoRcpp_weight_i", (DL_FUNC) &_ImbLassoRcpp_weight_i, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ImbLassoRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
